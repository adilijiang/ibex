#include "Math_Functions.hh"

#include "Check.hh"

#include <cmath>
#include <cstdlib>

namespace Math_Functions
{
    using namespace std;
    
    int factorial(int n)
    {
        int val = 1;
        
        for (int i = n; i >= 1; --i)
        {
            val *= i; 
        }
        
        return val;

        // return (n == 0) ? 1 : n * factorial(n - 1);
    }
    
    int factorial2(int n)
    {
        int val = 1;
        
        for (int i = n; i >=1; i -= 2)
        {
            val *= i;
        }

        return val;
    }

    double legendre_polynomial_rec(int l,
                                   double const &x)
    {
        if (l == 0)
        {
            return 1;
        }
        
        double plm2 = 0;
        double plm1 = 1;
        double pl = x;
    
        for (int i = 2; i <= l; ++i)
        {
            double j = static_cast<double>(i);
        
            plm2 = plm1;
            plm1 = pl;
            pl = ((2 * j - 1) * x * plm1 - (j - 1) * plm2) / j;
        }
        
        return pl;
    }
    
    double legendre_polynomial(int l,
                               int m,
                               double const &x)
    {
        if (l == m)
        {
            return factorial2(2 * l - 1) * pow(1. - x * x, l / 2.);
        }
        else if (l == m + 1)
        {
            return factorial2(2 * l - 1) * x * pow(1. - x * x, (l - 1.) / 2.);
        }

        double p2 = 0;
        double p1 = factorial2(2 * m - 1) * pow(1. - x * x, m / 2.);
        double p = x * (2 * m + 1) * p1;
        
        for (int i = m + 2; i <= l; ++i)
        {
            p2 = p1;
            p1 = p;
            
            p =  (x * (2 * i - 1.) * p1 - (i + m - 1.) * p2) / (i - m);
        }
        
        return p;
    }

    double spherical_harmonic_rec(int l,
                                  int m,
                                  double const &mu,
                                  double const &phi)
    {
        double val = (m == 0) ? 1 : 0;
        
        val = sqrt((2 - val) * factorial(l - std::abs(m)) / factorial(l + std::abs(m)));
        
        double t = (m >= 0) ? cos(m * phi) : sin(std::abs(m) * phi);
        
        return val * legendre_polynomial(l, std::abs(m), mu) * t;
    }

    double spherical_harmonic_rec(int l,
                                  int m,
                                  double const &x,
                                  double const &y,
                                  double const &z)
    {
        double mu;
        double phi;
        
        xyz_to_spherical(x, y, z, mu, phi);
        
        return spherical_harmonic_rec(l, m, mu, phi);
    }

    double spherical_harmonic(int l,
                              int m,
                              double const &x,
                              double const &y,
                              double const &z)
    {
        switch(l)
        {
        case 0:
            return 1;
        case 1:
            switch(m)
            {
            case -1:
                return z;
            case 0:
                return x;
            case 1:
                return y;
            default:
                AssertMsg(false, "Could not find moment");
                break;
            }
        case 2:
            switch(m)
            {
            case -2:
                return sqrt(3.) * y * z;
            case -1:
                return sqrt(3.) * x * z;
            case 0:
                return 0.5 * (3. * x * x - 1.);
            case 1:
                return sqrt(3.) * x * y;
            case 2:
                return 0.5 * sqrt(3.) * (y * y - z * z);
            default:
                AssertMsg(false, "Could not find moment");
                break;
            }
        case 3:
            switch(m)
            {
            case -3:
                return sqrt(0.625) * z * (3. * y * y - z * z);
            case -2:
                return sqrt(15.) * x * y * z;
            case -1:
                return sqrt(0.375) * z * (5. * x * x - 1);
            case 0:
                return 0.5 * x * (5. * x * x - 3.);
            case 1:
                return sqrt(0.375) * y * (5. * x * x - 1.);
            case 2:
                return sqrt(3.75) * x * (y * y - z * z);
            case 3:
                return sqrt(0.625) * y * (y * y - 3 * z * z);
            default:
                AssertMsg(false, "Could not find moment");
                break;
            }
        default:
            return spherical_harmonic_rec(l, m, x, y, z);
        }
    }
    
    // See file sphere_lebedev_rule.cpp for original conversion code
    void xyz_to_spherical(double const &x,
                          double const &y,
                          double const &z,
                          double &mu,
                          double &phi)
    {
        double val = sqrt(y * y + z * z);
        
        if (val > 0)
        {
            phi = acos(y / val);
        }
        else
        {
            phi = acos(y);
        }
        
        if (z < 0)
        {
            phi = -phi;
        }
        
        mu = x;
    }
    
    void spherical_to_xyz(double const &mu,
                          double const &phi,
                          double &x,
                          double &y,
                          double &z)
    {
        double val = sqrt(1 - mu * mu);
        
        x = mu;
        y = cos(phi) * val;
        z = sin(phi) * val;
    }

    double legendre_polynomial(int l,
                               double const &x)
    {
        switch(l)
        {
        case 0:
            return 1;
        case 1:
            return x;
        case 2:
            return (-1 + 3*pow(x,2))/2.;
        case 3:
            return (-3*x + 5*pow(x,3))/2.;
        case 4:
            return (3 - 30*pow(x,2) + 35*pow(x,4))/8.;
        case 5:
            return (15*x - 70*pow(x,3) + 63*pow(x,5))/8.;
        case 6:
            return (-5 + 105*pow(x,2) - 315*pow(x,4) + 231*pow(x,6))/16.;
        case 7:
            return (-35*x + 315*pow(x,3) - 693*pow(x,5) + 429*pow(x,7))/16.;
        case 8:
            return (35 - 1260*pow(x,2) + 6930*pow(x,4) - 12012*pow(x,6) + 6435*pow(x,8))/128.;
        case 9:
            return (315*x - 4620*pow(x,3) + 18018*pow(x,5) - 25740*pow(x,7) + 12155*pow(x,9))/128.;
        case 10:
            return (-63 + 3465*pow(x,2) - 30030*pow(x,4) + 90090*pow(x,6) - 109395*pow(x,8) + 46189*pow(x,10))/256.;
        case 11:
            return (-693*x + 15015*pow(x,3) - 90090*pow(x,5) + 218790*pow(x,7) - 230945*pow(x,9) + 88179*pow(x,11))/256.;
        case 12:
            return (231 - 18018*pow(x,2) + 225225*pow(x,4) - 1021020*pow(x,6) + 2078505*pow(x,8) - 1939938*pow(x,10) + 676039*pow(x,12))/1024.;
        case 13:
            return (3003*x - 90090*pow(x,3) + 765765*pow(x,5) - 2771340*pow(x,7) + 4849845*pow(x,9) - 4056234*pow(x,11) + 1300075*pow(x,13))/1024.;
        case 14:
            return (-429 + 45045*pow(x,2) - 765765*pow(x,4) + 4849845*pow(x,6) - 14549535*pow(x,8) + 22309287*pow(x,10) - 16900975*pow(x,12) + 5014575*pow(x,14))/2048.;
        case 15:
            return (-6435*x + 255255*pow(x,3) - 2909907*pow(x,5) + 14549535*pow(x,7) - 37182145*pow(x,9) + 50702925*pow(x,11) - 35102025*pow(x,13) + 9694845*pow(x,15))/2048.;
        case 16:
            return (6435 - 875160*pow(x,2) + 19399380*pow(x,4) - 162954792*pow(x,6) + 669278610*pow(x,8) - 1487285800*pow(x,10) + 1825305300*pow(x,12) - 1163381400*pow(x,14) + 300540195*pow(x,16))/32768.;
        case 17:
            return (109395*x - 5542680*pow(x,3) + 81477396*pow(x,5) - 535422888*pow(x,7) + 1859107250*pow(x,9) - 3650610600*pow(x,11) + 4071834900*pow(x,13) - 2404321560*pow(x,15) + 583401555*pow(x,17))/32768.;
        case 18:
            return (-12155 + 2078505*pow(x,2) - 58198140*pow(x,4) + 624660036*pow(x,6) - 3346393050*pow(x,8) + 10039179150*pow(x,10) - 17644617900*pow(x,12) + 18032411700*pow(x,14) - 9917826435*pow(x,16) + 2268783825*pow(x,18))/65536.;
        case 19:
            return (-230945*x + 14549535*pow(x,3) - 267711444*pow(x,5) + 2230928700*pow(x,7) - 10039179150*pow(x,9) + 26466926850*pow(x,11) - 42075627300*pow(x,13) + 39671305740*pow(x,15) - 20419054425*pow(x,17) + 4418157975*pow(x,19))/65536.;
        case 20:
            return (46189 - 9699690*pow(x,2) + 334639305*pow(x,4) - 4461857400*pow(x,6) + 30117537450*pow(x,8) - 116454478140*pow(x,10) + 273491577450*pow(x,12) - 396713057400*pow(x,14) + 347123925225*pow(x,16) - 167890003050*pow(x,18) + 34461632205*pow(x,20))/262144.;
        case 21:
            return (969969*x - 74364290*pow(x,3) + 1673196525*pow(x,5) - 17210021400*pow(x,7) + 97045398450*pow(x,9) - 328189892940*pow(x,11) + 694247850450*pow(x,13) - 925663800600*pow(x,15) + 755505013725*pow(x,17) - 344616322050*pow(x,19) + 67282234305*pow(x,21))/262144.;
        case 22:
            return (-88179 + 22309287*pow(x,2) - 929553625*pow(x,4) + 15058768725*pow(x,6) - 124772655150*pow(x,8) + 601681470390*pow(x,10) - 1805044411170*pow(x,12) + 3471239252250*pow(x,14) - 4281195077775*pow(x,16) + 3273855059475*pow(x,18) - 1412926920405*pow(x,20) + 263012370465*pow(x,22))/524288.;
        case 23:
            return (-2028117*x + 185910725*pow(x,3) - 5019589575*pow(x,5) + 62386327575*pow(x,7) - 429772478850*pow(x,9) + 1805044411170*pow(x,11) - 4859734953150*pow(x,13) + 8562390155550*pow(x,15) - 9821565178425*pow(x,17) + 7064634602025*pow(x,19) - 2893136075115*pow(x,21) + 514589420475*pow(x,23))/524288.;
        case 24:
            return (676039 - 202811700*pow(x,2) + 10039179150*pow(x,4) - 194090796900*pow(x,6) + 1933976154825*pow(x,8) - 11345993441640*pow(x,10) + 42117702927300*pow(x,12) - 102748681866600*pow(x,14) + 166966608033225*pow(x,16) - 178970743251300*pow(x,18) + 121511715154830*pow(x,20) - 47342226683700*pow(x,22) + 8061900920775*pow(x,24))/4.194304e6;
        case 25:
            return (16900975*x - 1825305300*pow(x,3) + 58227239070*pow(x,5) - 859544957700*pow(x,7) + 7091245901025*pow(x,9) - 36100888223400*pow(x,11) + 119873462177700*pow(x,13) - 267146572853160*pow(x,15) + 402684172315425*pow(x,17) - 405039050516100*pow(x,19) + 260382246760350*pow(x,21) - 96742811049300*pow(x,23) + 15801325804719*pow(x,25))/4.194304e6;
        case 26:
            return (-1300075 + 456326325*pow(x,2) - 26466926850*pow(x,4) + 601681470390*pow(x,6) - 7091245901025*pow(x,8) + 49638721307175*pow(x,10) - 222622144044300*pow(x,12) + 667866432132900*pow(x,14) - 1369126185872445*pow(x,16) + 1923935489951475*pow(x,18) - 1822675727322450*pow(x,20) + 1112542327066950*pow(x,22) - 395033145117975*pow(x,24) + 61989816618513*pow(x,26))/8.388608e6;
        case 27:
            return (-35102025*x + 4411154475*pow(x,3) - 164094946470*pow(x,5) + 2836498360410*pow(x,7) - 27577067392875*pow(x,9) + 166966608033225*pow(x,11) - 667866432132900*pow(x,13) + 1825501581163260*pow(x,15) - 3463083881912655*pow(x,17) + 4556689318306125*pow(x,19) - 4079321865912150*pow(x,21) + 2370198870707850*pow(x,23) - 805867616040669*pow(x,25) + 121683714103007*pow(x,27))/8.388608e6;
        case 28:
            return (5014575 - 2035917450*pow(x,2) + 136745788725*pow(x,4) - 3610088822340*pow(x,6) + 49638721307175*pow(x,8) - 408140597414550*pow(x,10) + 2170565904431925*pow(x,12) - 7823578204985400*pow(x,14) + 19624141997505045*pow(x,16) - 34630838819126550*pow(x,18) + 42832879592077575*pow(x,20) - 36343049350853700*pow(x,22) + 20146690401016725*pow(x,24) - 6570920561562378*pow(x,26) + 956086325095055*pow(x,28))/3.3554432e7;
        case 29:
            return (145422675*x - 21037813650*pow(x,3) + 902522205585*pow(x,5) - 18050444111700*pow(x,7) + 204070298707275*pow(x,9) - 1447043936287950*pow(x,11) + 6845630929362225*pow(x,13) - 22427590854291480*pow(x,15) + 51946258228689825*pow(x,17) - 85665759184155150*pow(x,19) + 99943385714847675*pow(x,21) - 80586761604066900*pow(x,23) + 42710983650155457*pow(x,25) - 13385208551330770*pow(x,27) + 1879204156221315*pow(x,29))/3.3554432e7;
        case 30:
            return (-9694845 + 4508102925*pow(x,2) - 347123925225*pow(x,4) + 10529425731825*pow(x,6) - 166966608033225*pow(x,8) + 1591748329916745*pow(x,10) - 9888133564634325*pow(x,12) + 42051732851796525*pow(x,14) - 126155198555389575*pow(x,16) + 271274904083157975*pow(x,18) - 419762220002360235*pow(x,20) + 463373879223384675*pow(x,22) - 355924863751295475*pow(x,24) + 180700315442965395*pow(x,26) - 54496920530418135*pow(x,28) + 7391536347803839*pow(x,30))/6.7108864e7;
        case 31:
            return (-300540195*x + 49589132175*pow(x,3) - 2429867476575*pow(x,5) + 55655536011075*pow(x,7) - 723521968143975*pow(x,9) + 5932880138780595*pow(x,11) - 32706903329175075*pow(x,13) + 126155198555389575*pow(x,15) - 348782019535488825*pow(x,17) + 699603700003933725*pow(x,19) - 1019422534291446285*pow(x,21) + 1067774591253886425*pow(x,23) - 783034700252850045*pow(x,25) + 381478443712926945*pow(x,27) - 110873045217057585*pow(x,29) + 14544636039226909*pow(x,31))/6.7108864e7;
        case 32:
            return (300540195 - 158685222960*pow(x,2) + 13884957009000*pow(x,4) - 479493848710800*pow(x,6) + 8682263617727700*pow(x,8) - 94926082220489520*pow(x,10) + 680303589246841560*pow(x,12) - 3364138628143722000*pow(x,14) + 11858588664206620050*pow(x,16) - 30382789257313693200*pow(x,18) + 57087661920320991960*pow(x,20) - 78588209916286040880*pow(x,22) + 78303470025285004500*pow(x,24) - 54932895894661480080*pow(x,26) + 25722546490357359720*pow(x,28) - 7214139475456546864*pow(x,30) + 916312070471295267*pow(x,32))/2.147483648e9;
        case 33:
            return (9917826435*x - 1851327601200*pow(x,3) + 102748681866600*pow(x,5) - 2671465728531600*pow(x,7) + 39552534258537300*pow(x,9) - 371074685043731760*pow(x,11) + 2354897039700605400*pow(x,13) - 10540967701516995600*pow(x,15) + 34180637914477904850*pow(x,17) - 81553802743315702800*pow(x,19) + 144078384846524408280*pow(x,21) - 187928328060684010800*pow(x,23) + 178531911657649810260*pow(x,25) - 120038550288334345360*pow(x,27) + 54106046065924101480*pow(x,29) - 14660993127540724272*pow(x,31) + 1804857108504066435*pow(x,33))/2.147483648e9;
        case 34:
            return (-583401555 + 347123925225*pow(x,2) - 34249560622200*pow(x,4) + 1335732864265800*pow(x,6) - 27382523717448900*pow(x,8) + 340151794623420780*pow(x,10) - 2783060137827988200*pow(x,12) + 15811451552275493400*pow(x,14) - 64563427171791598050*pow(x,16) + 193690281515374794150*pow(x,18) - 432235154539573224840*pow(x,20) + 720391924232622041400*pow(x,22) - 892659558288249051300*pow(x,24) + 810260214446256831180*pow(x,26) - 523025111970599647640*pow(x,28) + 227245393476881226216*pow(x,30) - 59560284580634192355*pow(x,32) + 7113260368810144185*pow(x,34))/4.294967296e9;
        case 35:
            return (-20419054425*x + 4281195077775*pow(x,3) - 267146572853160*pow(x,5) + 7823578204985400*pow(x,7) - 130827613316700300*pow(x,9) + 1391530068913994100*pow(x,11) - 10061832805993495800*pow(x,13) + 51650741737433278440*pow(x,15) - 193690281515374794150*pow(x,17) + 540293943174466531050*pow(x,19) - 1132044452365548922200*pow(x,21) + 1785319116576498102600*pow(x,23) - 2106676557560267761068*pow(x,25) + 1830587891897098766740*pow(x,27) - 1136226967384406131080*pow(x,29) + 476482276645073538840*pow(x,31) - 120925426269772451145*pow(x,33) + 14023284727082855679*pow(x,35))/4.294967296e9;
        case 36:
            return (2268783825 - 1511010027450*pow(x,2) + 166966608033225*pow(x,4) - 7302006324653040*pow(x,6) + 168206931407186100*pow(x,8) - 2354897039700605400*pow(x,10) + 21800637746319240900*pow(x,12) - 140865659283908941200*pow(x,14) + 658546957152274300110*pow(x,16) - 2281241093403303131100*pow(x,18) + 5943233374919131841550*pow(x,20) - 11732097051788416102800*pow(x,22) + 17555637979668898008900*pow(x,24) - 19770349232488666680792*pow(x,26) + 16475291027073888900660*pow(x,28) - 9847300383998186469360*pow(x,30) + 3990539066902490887785*pow(x,32) - 981629930895799897530*pow(x,34) + 110628135069209194801*pow(x,36))/1.7179869184e10;
        case 37:
            return (83945001525*x - 19643130356850*pow(x,3) + 1369126185872445*pow(x,5) - 44855181708582960*pow(x,7) + 841034657035930500*pow(x,9) - 10061832805993495800*pow(x,11) + 82171634582280215700*pow(x,13) - 478943241565290400080*pow(x,15) + 2053116984062972817990*pow(x,17) - 6603592638799035379500*pow(x,19) + 16131633446209072141350*pow(x,21) - 30095379393718110872400*pow(x,23) + 42835756670392111141716*pow(x,25) - 46130814875806888921848*pow(x,27) + 36927376439993199260100*pow(x,29) - 21282875023479951401520*pow(x,31) + 8343854412614299129005*pow(x,33) - 1991306431245765506418*pow(x,35) + 218266320541953276229*pow(x,37))/1.7179869184e10;
        case 38:
            return (-4418157975 + 3273855059475*pow(x,2) - 402684172315425*pow(x,4) + 19624141997505045*pow(x,6) - 504620794221558300*pow(x,8) + 7905725776137746700*pow(x,10) - 82171634582280215700*pow(x,12) + 598679051956613000100*pow(x,14) - 3172998975370048900530*pow(x,16) + 12546826013718167221050*pow(x,18) - 37640478041154501663150*pow(x,20) + 86524215756939568758150*pow(x,22) - 152984845251400396934700*pow(x,24) + 207588666941131000148316*pow(x,26) - 214178783351960555708580*pow(x,28) + 164942281431969623361780*pow(x,30) - 91782398538757290419055*pow(x,32) + 34847862546800896362315*pow(x,34) - 8075853860052271220473*pow(x,36) + 861577581086657669325*pow(x,38))/3.4359738368e10;
        case 39:
            return (-172308161025*x + 44742685812825*pow(x,3) - 3463083881912655*pow(x,5) + 126155198555389575*pow(x,7) - 2635241925379248900*pow(x,9) + 35216414820977235300*pow(x,11) - 322365643361253153900*pow(x,13) + 2115332650246699267020*pow(x,15) - 10265584920314864089950*pow(x,17) + 37640478041154501663150*pow(x,19) - 105751819258481695148850*pow(x,21) + 229477267877100595402050*pow(x,23) - 385521810033529000275444*pow(x,25) + 499750494487907963320020*pow(x,27) - 494826844295908870085340*pow(x,29) + 367129594155029161676220*pow(x,31) - 197471221098538412719785*pow(x,33) + 72682684740470440984257*pow(x,35) - 16369974040646495717175*pow(x,37) + 1701063429324939500975*pow(x,39))/3.4359738368e10;
        case 40:
            return (34461632205 - 28258538408100*pow(x,2) + 3847870979902950*pow(x,4) - 207785032914759300*pow(x,6) + 5929294332103310025*pow(x,8) - 103301483474866556880*pow(x,10) + 1197358103913226000200*pow(x,12) - 9763073770369381232400*pow(x,14) + 58171647881784229843050*pow(x,16) - 260061484647976556945400*pow(x,18) + 888315281771246239250340*pow(x,20) - 2345767627188139419665400*pow(x,22) + 4819022625419112503443050*pow(x,24) - 7710436200670580005508880*pow(x,26) + 9566652323054238154983240*pow(x,28) - 9104813935044723209570256*pow(x,30) + 6516550296251767619752905*pow(x,32) - 3391858621221953912598660*pow(x,34) + 1211378079007840683070950*pow(x,36) - 265365894974690562152100*pow(x,38) + 26876802183334044115405*pow(x,40))/2.74877906944e11;
        default:
            return legendre_polynomial_rec(l,
                                           x);
        }
    }

    double d_legendre_polynomial(int l,
                                 double const &x)
    {
        switch(l)
        {
        case 0:
            return 0;
        case 1:
            return 1;
        case 2:
            return 3*x;
        case 3:
            return (3*(-1 + 5*pow(x,2)))/2.;
        case 4:
            return (5*x*(-3 + 7*pow(x,2)))/2.;
        case 5:
            return (15*(1 - 14*pow(x,2) + 21*pow(x,4)))/8.;
        case 6:
            return (21*x*(5 - 30*pow(x,2) + 33*pow(x,4)))/8.;
        case 7:
            return (7*(-5 + 135*pow(x,2) - 495*pow(x,4) + 429*pow(x,6)))/16.;
        case 8:
            return (9*x*(-35 + 11*pow(x,2)*(35 - 91*pow(x,2) + 65*pow(x,4))))/16.;
        case 9:
            return (45*(7 + 11*pow(x,2)*(-28 + 182*pow(x,2) - 364*pow(x,4) + 221*pow(x,6))))/128.;
        case 10:
            return (55*x*(63 + 13*pow(x,2)*(-84 + 378*pow(x,2) - 612*pow(x,4) + 323*pow(x,6))))/128.;
        case 11:
            return (33*(-21 + 13*pow(x,2)*(105 - 1050*pow(x,2) + 3570*pow(x,4) - 4845*pow(x,6) + 2261*pow(x,8))))/256.;
        case 12:
            return (39*x*(-231 + 5775*pow(x,2) + 17*pow(x,4)*(-2310 + 6270*pow(x,2) - 7315*pow(x,4) + 3059*pow(x,6))))/256.;
        case 13:
            return (91*(33 - 2970*pow(x,2) + 42075*pow(x,4) + 323*pow(x,6)*(-660 + 1485*pow(x,2) - 1518*pow(x,4) + 575*pow(x,6))))/1024.;
        case 14:
            return (105*x*(429 + 17*pow(x,2)*(-858 + 19*pow(x,2)*(429 - 1716*pow(x,2) + 3289*pow(x,4) - 2990*pow(x,6) + 1035*pow(x,8)))))/1024.;
        case 15:
            return (15*(-429 + 51051*pow(x,2) + 323*pow(x,4)*(-3003 + 21021*pow(x,2) + 23*pow(x,4)*(-3003 + 5005*pow(x,2) - 4095*pow(x,4) + 1305*pow(x,6)))))/2048.;
        case 16:
            return (17*x*(-6435 + 19*pow(x,2)*(15015 - 189189*pow(x,2) + 115*pow(x,4)*(9009 - 25025*pow(x,2) + 36855*pow(x,4) - 27405*pow(x,6) + 8091*pow(x,8)))))/2048.;
        case 17:
            return (153*(715 + 19*pow(x,2)*(-5720 + 140140*pow(x,2) + 23*pow(x,4)*(-56056 + 5*pow(x,2)*(50050 + 3*pow(x,2)*(-40040 + 52780*pow(x,2) - 35960*pow(x,4) + 9889*pow(x,6)))))))/32768.;
        case 18:
            return (171*x*(12155 - 680680*pow(x,2) + 23*pow(x,4)*(476476 + 5*pow(x,2)*(-680680 + 2552550*pow(x,2) + 87*pow(x,4)*(-61880 + 31*pow(x,2)*(2380 - 1496*pow(x,2) + 385*pow(x,4)))))))/32768.;
        case 19:
            return (95*(-2431 + 459459*pow(x,2) + 69*pow(x,4)*(-204204 + 5*pow(x,2)*(476476 - 2756754*pow(x,2) + 8882874*pow(x,4) + 899*pow(x,6)*(-18564 + 20196*pow(x,2) - 11781*pow(x,4) + 2849*pow(x,6))))))/65536.;
        case 20:
            return (105*x*(-46189 + 69*pow(x,2)*(46189 - 923780*pow(x,2) + 8314020*pow(x,4) + 145*pow(x,6)*(-277134 + 781014*pow(x,2) + 341*pow(x,4)*(-3876 + 3876*pow(x,2) - 2109*pow(x,4) + 481*pow(x,6))))))/65536.;
        case 21:
            return (231*(4199 + 115*pow(x,2)*(-8398 + 314925*pow(x,2) - 4534920*pow(x,4) + 87*pow(x,6)*(377910 + 31*pow(x,2)*(-50388 + 125970*pow(x,2) - 193800*pow(x,4) + 37*pow(x,6)*(4845 - 2470*pow(x,2) + 533*pow(x,4)))))))/262144.;
        case 22:
            return (253*x*(88179 + 5*pow(x,2)*(-1469650 + 35712495*pow(x,2) + 87*pow(x,4)*(-4534920 + 31*pow(x,2)*(881790 - 3174444*pow(x,2) + 7122150*pow(x,4) + 37*pow(x,6)*(-271320 + 13*pow(x,2)*(17955 - 8610*pow(x,2) + 1763*pow(x,4))))))))/262144.;
        case 23:
            return (69*(-29393 + 8083075*pow(x,2) + 15*pow(x,4)*(-24249225 + 421936515*pow(x,2) + 899*pow(x,4)*(-4157010 + 21339318*pow(x,2) - 67897830*pow(x,4) + 37*pow(x,6)*(3730650 - 4849845*pow(x,2) + 533*pow(x,4)*(7315 - 3311*pow(x,2) + 645*pow(x,4)))))))/524288.;
        case 24:
            return (75*x*(-676039 + 3*pow(x,2)*(22309287 - 646969323*pow(x,2) + 899*pow(x,4)*(9561123 - 70114902*pow(x,2) + 312330018*pow(x,4) + 37*pow(x,6)*(-24025386 + 44618574*pow(x,2) + 533*pow(x,4)*(-100947 + 43*pow(x,2)*(1771 - 759*pow(x,2) + 141*pow(x,4))))))))/524288.;
        case 25:
            return (325*(52003 + 3*pow(x,2)*(-5616324 + 298601226*pow(x,2) + 899*pow(x,4)*(-6864396 + 72811629*pow(x,2) - 453050136*pow(x,4) + 37*pow(x,6)*(48050772 - 123559128*pow(x,2) + 41*pow(x,4)*(5148297 + 43*pow(x,2)*(-134596 + 95634*pow(x,2) - 38916*pow(x,4) + 6909*pow(x,6))))))))/4.194304e6;
        case 26:
            return (351*x*(1300075 + 29*pow(x,2)*(-5200300 + 31*pow(x,2)*(5720330 - 89890900*pow(x,2) + 786545375*pow(x,4) + 37*pow(x,6)*(-114406600 + 400423100*pow(x,2) + 41*pow(x,4)*(-22881320 + 43*pow(x,2)*(841225 - 885500*pow(x,2) + 47*pow(x,4)*(12650 - 4900*pow(x,2) + 833*pow(x,4)))))))))/4.194304e6;
        case 27:
            return (189*(-185725 + 70018325*pow(x,2) + 899*pow(x,4)*(-4828850 + 116858170*pow(x,2) - 1460727125*pow(x,4) + 37*pow(x,6)*(292145425 - 1381051100*pow(x,2) + 41*pow(x,4)*(106234700 + 43*pow(x,2)*(-5311735 + 7811375*pow(x,2) + 47*pow(x,4)*(-164450 + 7*pow(x,2)*(14950 - 5525*pow(x,2) + 901*pow(x,4)))))))))/8.388608e6;
        case 28:
            return (203*x*(-5014575 + 31*pow(x,2)*(21729825 - 860501070*pow(x,2) + 15775852950*pow(x,4) + 37*pow(x,6)*(-4382181375 + 27966284775*pow(x,2) + 41*pow(x,4)*(-2868336900 + 43*pow(x,2)*(191222460 - 379632825*pow(x,2) + 47*pow(x,4)*(11100375 + 7*pow(x,2)*(-1480050 + 895050*pow(x,2) + 901*pow(x,4)*(-351 + 55*pow(x,2))))))))))/8.388608e6;
        case 29:
            return (435*(334305 + 31*pow(x,2)*(-4680270 + 334639305*pow(x,2) - 9369900540*pow(x,4) + 37*pow(x,6)*(3681032355 - 31902280410*pow(x,2) + 41*pow(x,4)*(4350310965 + 43*pow(x,2)*(-382444920 + 7*pow(x,2)*(143416845 + 47*pow(x,2)*(-5624190 + 7252245*pow(x,2) - 6404580*pow(x,4) + 901*pow(x,6)*(4095 - 1386*pow(x,2) + 209*pow(x,4))))))))))/3.3554432e7;
        case 30:
            return (465*x*(9694845 - 1493006130*pow(x,2) + 67931778915*pow(x,4) + 37*pow(x,6)*(-38818159380 + 462583065945*pow(x,2) + 41*pow(x,4)*(-84106011990 + 43*pow(x,2)*(9704539845 - 33272708040*pow(x,2) + 329*pow(x,4)*(244652265 - 420630210*pow(x,2) + 510765255*pow(x,4) + 901*pow(x,6)*(-475020 + 261261*pow(x,2) - 84854*pow(x,4) + 12331*pow(x,6))))))))/3.3554432e7;
        case 31:
            return (31*(-9694845 + 4798948275*pow(x,2) - 391914109125*pow(x,4) + 37*pow(x,6)*(339658894575 - 5677155809325*pow(x,2) + 41*pow(x,4)*(1387749197835 + 43*pow(x,2)*(-210265029975 + 935794913625*pow(x,2) + 47*pow(x,4)*(-62386327575 + 7*pow(x,2)*(19979934975 - 32178211065*pow(x,2) + 901*pow(x,4)*(40970475 - 32657625*pow(x,2) + 209*pow(x,4)*(82215 + 59*pow(x,2)*(-435 + 61*pow(x,2)))))))))))/6.7108864e7;
        case 32:
            return (33*x*(-300540195 + 52594534125*pow(x,2) + 37*pow(x,4)*(-73632347775 + 1777695253425*pow(x,2) + 41*pow(x,4)*(-592565084475 + 43*pow(x,2)*(118513016895 - 683728943625*pow(x,2) + 47*pow(x,4)*(58605338025 + 7*pow(x,2)*(-24131609775 + 50380027425*pow(x,2) + 901*pow(x,4)*(-84672315 + 92035125*pow(x,2) + 19*pow(x,4)*(-3681405 + 59*pow(x,2)*(31465 - 9455*pow(x,2) + 1281*pow(x,4)))))))))))/6.7108864e7;
        case 33:
            return (561*(17678835 - 9900147600*pow(x,2) + 37*pow(x,4)*(24750369000 - 900913431600*pow(x,2) + 41*pow(x,4)*(418281236100 + 43*pow(x,2)*(-111541662960 + 836562472200*pow(x,2) + 47*pow(x,4)*(-91929942000 + 7*pow(x,2)*(48263219550 - 128701918800*pow(x,2) + 53*pow(x,4)*(4741649640 - 6773785200*pow(x,2) + 19*pow(x,4)*(368140500 + 59*pow(x,2)*(-4530960 + 61*pow(x,2)*(35960 + 21*pow(x,2)*(-496 + 65*pow(x,2)))))))))))))/2.147483648e9;
        case 34:
            return (595*x*(583401555 + 37*pow(x,2)*(-3111474960 + 182021285160*pow(x,2) + 41*pow(x,4)*(-121347523440 + 43*pow(x,2)*(43819939020 - 430232128560*pow(x,2) + 47*pow(x,4)*(60673761720 + 7*pow(x,2)*(-40449174480 + 136515963870*pow(x,2) + 53*pow(x,4)*(-6386711760 + 11708971560*pow(x,2) + 19*pow(x,4)*(-833049360 + 59*pow(x,2)*(13884156 + 61*pow(x,2)*(-158224 + 73656*pow(x,2) - 20592*pow(x,4) + 2613*pow(x,6))))))))))))/2.147483648e9;
        case 35:
            return (315*(-64822395 + 37*pow(x,2)*(1101980715 - 114605994360*pow(x,2) + 41*pow(x,4)*(114605994360 + 43*pow(x,2)*(-57302997180 + 744938963340*pow(x,2) + 47*pow(x,4)*(-135443447880 + 7*pow(x,2)*(114605994360 - 487075476030*pow(x,2) + 53*pow(x,4)*(28651498590 - 66350838840*pow(x,2) + 19*pow(x,4)*(6031894440 + 59*pow(x,2)*(-131128140 + 61*pow(x,2)*(2017356 - 1344904*pow(x,2) + 602888*pow(x,4) + 871*pow(x,6)*(-187 + 23*pow(x,2)))))))))))))/4.294967296e9;
        case 36:
            return (333*x*(-2268783825 + 501401225325*pow(x,2) + 41*pow(x,4)*(-802241960520 + 43*pow(x,2)*(573029971800 + 7*pow(x,2)*(-1432574929500 + 47*pow(x,2)*(338608619700 - 2552588056200*pow(x,2) + 13638113328840*pow(x,4) + 53*pow(x,6)*(-1002802450650 + 2902849199250*pow(x,2) + 19*pow(x,4)*(-331754194200 + 59*pow(x,2)*(9178969800 + 61*pow(x,2)*(-183579396 + 164750740*pow(x,2) + 13*pow(x,4)*(-8115800 + 67*pow(x,2)*(52360 + 23*pow(x,2)*(-595 + 71*pow(x,2))))))))))))))/4.294967296e9;
        case 37:
            return (703*(119409675 - 83825591850*pow(x,2) + 41*pow(x,4)*(237505843575 + 43*pow(x,2)*(-253339566480 + 6107293120500*pow(x,2) + 329*pow(x,4)*(-271435249800 + 2619761426100*pow(x,2) - 17618615305200*pow(x,4) + 53*pow(x,6)*(1615039736310 - 5805698398500*pow(x,2) + 15675385675950*pow(x,4) + 59*pow(x,6)*(-542870499600 + 61*pow(x,2)*(13768454700 - 16013771928*pow(x,2) + 13768454700*pow(x,4) + 871*pow(x,6)*(-9738960 + 23*pow(x,2)*(176715 + 71*pow(x,2)*(-630 + 73*pow(x,2))))))))))))/1.7179869184e10;
        case 38:
            return (741*x*(4418157975 + 41*pow(x,2)*(-26508947850 + 43*pow(x,2)*(45065211345 - 1545092960400*pow(x,2) + 47*pow(x,4)*(643788733500 + 7*pow(x,2)*(-1147114470600 + 9750473000100*pow(x,2) + 53*pow(x,4)*(-1114339771440 + 4957173247950*pow(x,2) - 16523910826500*pow(x,4) + 59*pow(x,6)*(708167606850 + 61*pow(x,2)*(-22392651600 + 32917197852*pow(x,2) - 36574664280*pow(x,4) + 67*pow(x,6)*(450426900 + 23*pow(x,2)*(-11623920 + 71*pow(x,2)*(66045 + 73*pow(x,2)*(-222 + 25*pow(x,2))))))))))))))/1.7179869184e10;
        case 39:
            return (195*(-883631595 + 41*pow(x,2)*(16789000305 + 43*pow(x,2)*(-50367000915 + 2568717046665*pow(x,2) + 47*pow(x,4)*(-1467838312380 + 7*pow(x,2)*(3424956062220 - 37051797400380*pow(x,2) + 53*pow(x,4)*(5293113914340 - 29112126528870*pow(x,2) + 119302636167330*pow(x,4) + 59*pow(x,6)*(-6279086114070 + 61*pow(x,2)*(244639718730 - 446733399420*pow(x,2) + 625426759188*pow(x,4) + 67*pow(x,6)*(-9927408876 + 23*pow(x,2)*(342324444 + 71*pow(x,2)*(-2760681 + 73*pow(x,2)*(14763 - 3515*pow(x,2) + 385*pow(x,4))))))))))))))/3.4359738368e10;
        case 40:
            return (205*x*(-34461632205 + 43*pow(x,2)*(218257003965 - 17678817321165*pow(x,2) + 47*pow(x,4)*(14311423545705 + 7*pow(x,2)*(-44524428808860 + 619294327977780*pow(x,2) + 53*pow(x,4)*(-111155392201140 + 756915289750620*pow(x,2) - 3806838663157530*pow(x,4) + 59*pow(x,6)*(244884358448730 + 61*pow(x,2)*(-11661159926130 + 26133903866070*pow(x,2) - 45298766701188*pow(x,4) + 67*pow(x,6)*(903394207716 + 23*pow(x,2)*(-40051959948 + 71*pow(x,2)*(430666236 + 73*pow(x,2)*(-3262623 + 5*pow(x,2)*(246753 + 77*pow(x,2)*(-741 + 79*pow(x,2)))))))))))))))/3.4359738368e10;
        default:
            AssertMsg(false, "Could not find moment");
            break;
        }
    }
    
    double dd_legendre_polynomial(int l,
                                  double const &x)
    {
        switch(l)
        {
        case 0:
            return 0;
        case 1:
            return 0;
        case 2:
            return 3;
        case 3:
            return 15*x;
        case 4:
            return (15*(-1 + 7*pow(x,2)))/2.;
        case 5:
            return (105*x*(-1 + 3*pow(x,2)))/2.;
        case 6:
            return (105*(1 - 18*pow(x,2) + 33*pow(x,4)))/8.;
        case 7:
            return (63*x*(15 - 110*pow(x,2) + 143*pow(x,4)))/8.;
        case 8:
            return (315*(-1 + 33*pow(x,2) - 143*pow(x,4) + 143*pow(x,6)))/16.;
        case 9:
            return (495*x*(-7 + 91*pow(x,2) - 273*pow(x,4) + 221*pow(x,6)))/16.;
        case 10:
            return (495*(7 + 13*pow(x,2)*(-28 + 210*pow(x,2) - 476*pow(x,4) + 323*pow(x,6))))/128.;
        case 11:
            return (2145*x*(21 - 420*pow(x,2) + 2142*pow(x,4) - 3876*pow(x,6) + 2261*pow(x,8)))/128.;
        case 12:
            return (3003*(-3 + 225*pow(x,2) + 17*pow(x,4)*(-150 + 570*pow(x,2) - 855*pow(x,4) + 437*pow(x,6))))/256.;
        case 13:
            return (1365*x*(-99 + 2805*pow(x,2) + 323*pow(x,4)*(-66 + 198*pow(x,2) - 253*pow(x,4) + 115*pow(x,6))))/256.;
        case 14:
            return (1365*(33 - 3366*pow(x,2) + 323*pow(x,4)*(165 - 924*pow(x,2) + 23*pow(x,4)*(99 - 110*pow(x,2) + 45*pow(x,4)))))/1024.;
        case 15:
            return (1785*x*(429 + 19*pow(x,2)*(-858 + 9009*pow(x,2) + 23*pow(x,4)*(-1716 + 5*pow(x,2)*(715 - 702*pow(x,2) + 261*pow(x,4))))))/1024.;
        case 16:
            return (765*(-143 + 19*pow(x,2)*(1001 - 21021*pow(x,2) + 23*pow(x,4)*(7007 + 5*pow(x,2)*(-5005 + 9009*pow(x,2) - 7917*pow(x,4) + 2697*pow(x,6))))))/2048.;
        case 17:
            return (2907*x*(-715 + 35035*pow(x,2) + 23*pow(x,4)*(-21021 + 5*pow(x,2)*(25025 - 75075*pow(x,2) + 118755*pow(x,4) - 94395*pow(x,6) + 29667*pow(x,8)))))/2048.;
        case 18:
            return (14535*(143 - 24024*pow(x,2) + 23*pow(x,4)*(28028 + 5*pow(x,2)*(-56056 + 270270*pow(x,2) + 87*pow(x,4)*(-8008 + 31*pow(x,2)*(364 - 264*pow(x,2) + 77*pow(x,4)))))))/32768.;
        case 19:
            return (5985*x*(7293 + 23*pow(x,2)*(-19448 + 5*pow(x,2)*(68068 + 3*pow(x,2)*(-175032 + 704990*pow(x,2) + 899*pow(x,4)*(-1768 + 2244*pow(x,2) - 1496*pow(x,4) + 407*pow(x,6)))))))/32768.;
        case 20:
            return (21945*(-221 + 69*pow(x,2)*(663 + 5*pow(x,2)*(-4420 + 55692*pow(x,2) - 346086*pow(x,4) + 899*pow(x,6)*(1326 - 2652*pow(x,2) + 3060*pow(x,4) - 1887*pow(x,6) + 481*pow(x,8))))))/65536.;
        case 21:
            return (26565*x*(-4199 + 15*pow(x,2)*(20995 - 453492*pow(x,2) + 4383756*pow(x,4) + 899*pow(x,6)*(-25194 + 75582*pow(x,2) - 135660*pow(x,4) + 37*pow(x,6)*(3876 - 2223*pow(x,2) + 533*pow(x,4))))))/65536.;
        case 22:
            return (5313*(4199 + 5*pow(x,2)*(-209950 + 3*pow(x,2)*(2834325 - 43837560*pow(x,2) + 899*pow(x,4)*(377910 - 1662804*pow(x,2) + 4408950*pow(x,4) - 7170600*pow(x,6) + 481*pow(x,8)*(14535 - 7790*pow(x,2) + 1763*pow(x,4)))))))/262144.;
        case 23:
            return (18975*x*(29393 - 2645370*pow(x,2) + 87*pow(x,4)*(793611 + 31*pow(x,2)*(-302328 + 1939938*pow(x,2) - 7407036*pow(x,4) + 37*pow(x,6)*(474810 - 705432*pow(x,2) + 533*pow(x,4)*(1197 - 602*pow(x,2) + 129*pow(x,4)))))))/262144.;
        case 24:
            return (22425*(-2261 + 671517*pow(x,2) + 87*pow(x,4)*(-373065 + 31*pow(x,2)*(223839 - 2110482*pow(x,2) + 11490402*pow(x,4) + 37*pow(x,6)*(-1044582 + 2238390*pow(x,2) + 41*pow(x,4)*(-74613 + 43*pow(x,2)*(1463 - 693*pow(x,2) + 141*pow(x,4))))))))/524288.;
        case 25:
            return (8775*x*(-156009 + 29*pow(x,2)*(572033 + 31*pow(x,2)*(-572033 + 8090181*pow(x,2) - 62923630*pow(x,4) + 37*pow(x,6)*(8008462 - 24025386*pow(x,2) + 41*pow(x,4)*(1144066 + 43*pow(x,2)*(-33649 + 26565*pow(x,2) - 11891*pow(x,4) + 2303*pow(x,6))))))))/524288.;
        case 26:
            return (61425*(7429 + 29*pow(x,2)*(-89148 + 31*pow(x,2)*(163438 - 3595636*pow(x,2) + 40450905*pow(x,4) + 37*pow(x,6)*(-7191272 + 29745716*pow(x,2) + 41*pow(x,4)*(-1961256 + 43*pow(x,2)*(81719 - 96140*pow(x,2) + 71346*pow(x,4) - 30268*pow(x,6) + 5593*pow(x,8))))))))/4.194304e6;
        case 27:
            return (71253*x*(185725 + 31*pow(x,2)*(-742900 + 26967270*pow(x,2) - 449454500*pow(x,4) + 37*pow(x,6)*(112363625 - 637408200*pow(x,2) + 41*pow(x,4)*(57203300 + 43*pow(x,2)*(-3268760 + 5407875*pow(x,2) + 47*pow(x,4)*(-126500 + 88550*pow(x,2) - 35700*pow(x,4) + 6307*pow(x,6))))))))/4.194304e6;
        case 28:
            return (27405*(-37145 + 31*pow(x,2)*(482885 - 31870410*pow(x,2) + 818007190*pow(x,4) + 37*pow(x,6)*(-292145425 + 2278734315*pow(x,2) + 41*pow(x,4)*(-276210220 + 43*pow(x,2)*(21246940 - 47805615*pow(x,2) + 47*pow(x,4)*(1562275 + 7*pow(x,2)*(-230230 + 17*pow(x,2)*(8970 - 3445*pow(x,2) + 583*pow(x,4))))))))))/8.388608e6;
        case 29:
            return (94395*x*(-334305 + 47805615*pow(x,2) - 2007835830*pow(x,4) + 37*pow(x,6)*(1051723530 - 11393671575*pow(x,2) + 41*pow(x,4)*(1864418985 + 43*pow(x,2)*(-191222460 + 573667380*pow(x,2) + 47*pow(x,4)*(-25308855 + 7*pow(x,2)*(5180175 - 5032170*pow(x,2) + 901*pow(x,4)*(3510 - 1287*pow(x,2) + 209*pow(x,4)))))))))/8.388608e6;
        case 30:
            return (13485*(334305 - 154448910*pow(x,2) + 11712375675*pow(x,4) + 37*pow(x,6)*(-9369900540 + 143560261845*pow(x,2) + 41*pow(x,4)*(-31902280410 + 43*pow(x,2)*(4350310965 - 17210021400*pow(x,2) + 329*pow(x,4)*(143416845 - 275585310*pow(x,2) + 369864495*pow(x,4) + 901*pow(x,6)*(-376740 + 225225*pow(x,2) - 79002*pow(x,4) + 12331*pow(x,6))))))))/3.3554432e7;
        case 31:
            return (5115*x*(29084535 - 4750474050*pow(x,2) + 37*pow(x,4)*(6175616265 - 137628019620*pow(x,2) + 41*pow(x,4)*(42053005995 + 43*pow(x,2)*(-7646001090 + 39700390275*pow(x,2) + 47*pow(x,4)*(-3024791640 + 7*pow(x,2)*(1089814635 - 1950194610*pow(x,2) + 901*pow(x,4)*(2731365 - 2375100*pow(x,2) + 19*pow(x,4)*(71253 + 59*pow(x,2)*(-406 + 61*pow(x,2)))))))))))/3.3554432e7;
        case 32:
            return (17391*(-570285 + 299399625*pow(x,2) + 37*pow(x,4)*(-698599125 + 23612650425*pow(x,2) + 41*pow(x,4)*(-10119707325 + 43*pow(x,2)*(2473706235 - 16866178875*pow(x,2) + 47*pow(x,4)*(1668083625 + 7*pow(x,2)*(-778439025 + 1816357725*pow(x,2) + 53*pow(x,4)*(-57358665 + 68284125*pow(x,2) + 19*pow(x,4)*(-2968875 + 59*pow(x,2)*(27405 - 8845*pow(x,2) + 1281*pow(x,4)))))))))))/6.7108864e7;
        case 33:
            return (19635*x*(-17678835 + 37*pow(x,2)*(88394175 - 4826321955*pow(x,2) + 41*pow(x,4)*(2987723115 + 43*pow(x,2)*(-995907705 + 8963169345*pow(x,2) + 47*pow(x,4)*(-1149124275 + 7*pow(x,2)*(689474565 - 2068423695*pow(x,2) + 53*pow(x,4)*(84672315 - 133056495*pow(x,2) + 19*pow(x,4)*(7888725 + 59*pow(x,2)*(-105183 + 61*pow(x,2)*(899 - 279*pow(x,2) + 39*pow(x,4))))))))))))/6.7108864e7;
        case 34:
            return (58905*(5892945 + 37*pow(x,2)*(-94287120 + 9192994200*pow(x,2) + 41*pow(x,4)*(-8580127920 + 43*pow(x,2)*(3983630820 - 47803569840*pow(x,2) + 47*pow(x,4)*(7967261640 + 7*pow(x,2)*(-6128662800 + 23442135210*pow(x,2) + 53*pow(x,4)*(-1225732560 + 2483721240*pow(x,2) + 19*pow(x,4)*(-193536720 + 59*pow(x,2)*(3506100 + 61*pow(x,2)*(-43152 + 21576*pow(x,2) - 6448*pow(x,4) + 871*pow(x,6))))))))))))/2.147483648e9;
        case 35:
            return (198135*x*(64822395 - 13483058160*pow(x,2) + 41*pow(x,4)*(20224587240 + 43*pow(x,2)*(-13483058160 + 219099695100*pow(x,2) + 47*pow(x,4)*(-47803569840 + 7*pow(x,2)*(47190703560 - 229211988720*pow(x,2) + 53*pow(x,4)*(15168440430 - 39029905200*pow(x,2) + 19*pow(x,4)*(3902990520 + 59*pow(x,2)*(-92561040 + 61*pow(x,2)*(1542684 - 1107568*pow(x,2) + 531960*pow(x,4) + 871*pow(x,6)*(-176 + 23*pow(x,2))))))))))))/2.147483648e9;
        case 36:
            return (221445*(-3411705 + 2261960415*pow(x,2) + 41*pow(x,4)*(-6031894440 + 43*pow(x,2)*(6031894440 - 135717624900*pow(x,2) + 47*pow(x,4)*(39207313860 + 7*pow(x,2)*(-49900217640 + 307626616440*pow(x,2) + 53*pow(x,4)*(-25635551370 + 82938548550*pow(x,2) - 199052516520*pow(x,4) + 59*pow(x,6)*(6031894440 + 61*pow(x,2)*(-131128140 + 127093428*pow(x,2) - 87418760*pow(x,4) + 871*pow(x,6)*(46376 + 23*pow(x,2)*(-561 + 71*pow(x,2))))))))))))/4.294967296e9;
        case 37:
            return (82251*x*(-358229025 + 41*pow(x,2)*(2029964475 + 43*pow(x,2)*(-3247943160 + 104398173000*pow(x,2) + 329*pow(x,4)*(-5799898500 + 67173369900*pow(x,2) - 527052594600*pow(x,4) + 53*pow(x,6)*(55215033720 - 223296092250*pow(x,2) + 669888276750*pow(x,4) + 59*pow(x,6)*(-25519553400 + 61*pow(x,2)*(706074600 - 889653996*pow(x,2) + 823753700*pow(x,4) + 67*pow(x,6)*(-8115800 + 23*pow(x,2)*(157080 + 71*pow(x,2)*(-595 + 73*pow(x,2))))))))))))/4.294967296e9;
        case 38:
            return (137085*(23881935 + 41*pow(x,2)*(-429874830 + 43*pow(x,2)*(1217978685 - 58462976880*pow(x,2) + 47*pow(x,4)*(31319451900 + 7*pow(x,2)*(-68206806360 + 685168372980*pow(x,2) + 53*pow(x,4)*(-90351873360 + 455524028190*pow(x,2) - 1697050301100*pow(x,4) + 59*pow(x,6)*(80386593210 + 61*pow(x,2)*(-2783951280 + 4448269980*pow(x,2) - 5337923976*pow(x,4) + 67*pow(x,6)*(70607460 + 23*pow(x,2)*(-1947792 + 71*pow(x,2)*(11781 + 73*pow(x,2)*(-42 + 5*pow(x,2))))))))))))))/1.7179869184e10;
        case 39:
            return (151905*x*(883631595 + 43*pow(x,2)*(-5301789570 + 405586902105*pow(x,2) + 47*pow(x,4)*(-309018592080 + 7*pow(x,2)*(901304226900 - 11700567600120*pow(x,2) + 53*pow(x,4)*(1950094600020 - 12257737485840*pow(x,2) + 56511775026630*pow(x,4) + 59*pow(x,6)*(-3304782165300 + 61*pow(x,2)*(141633521370 - 282147410160*pow(x,2) + 427923572076*pow(x,4) + 67*pow(x,6)*(-7314932856 + 23*pow(x,2)*(270256140 + 71*pow(x,2)*(-2324784 + 73*pow(x,2)*(13209 - 3330*pow(x,2) + 385*pow(x,4)))))))))))))/1.7179869184e10;
        case 40:
            return (55965*(-126233085 + 43*pow(x,2)*(2398428615 - 323787863025*pow(x,2) + 47*pow(x,4)*(366959578095 + 7*pow(x,2)*(-1467838312380 + 24953251310460*pow(x,2) + 53*pow(x,4)*(-5293113914340 + 41588752184100*pow(x,2) - 237055887449370*pow(x,4) + 59*pow(x,6)*(17043233738190 + 61*pow(x,2)*(-897012302010 + 2201757468570*pow(x,2) - 4148238708900*pow(x,4) + 67*pow(x,6)*(89346679884 + 23*pow(x,2)*(-4254603804 + 71*pow(x,2)*(48903492 + 73*pow(x,2)*(-394383 + 5*pow(x,2)*(31635 - 7733*pow(x,2) + 869*pow(x,4))))))))))))))/3.4359738368e10;
        default:
            AssertMsg(false, "Could not find moment");
            break;
        }
    }
} // namespace Math_Functions
